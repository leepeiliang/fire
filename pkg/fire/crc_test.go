package fire

import (
	"github.com/stretchr/testify/assert"
	//hash "hash/crc32"
	"testing"
)

func TestParseCRC(t *testing.T) {
	data := []byte{
		0x00, 0x00, 0x02, 0x03, 0x33, 0x25, 0x0B, 0x10,
		0x06, 0x15, 0x10, 0x46, 0x94, 0x50, 0x61, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
		0x02, 0x08, 0x01, 0x00, 0x00, 0x31, 0x25, 0x0B, 0x10, 0x06, 0x15,
	}
	data2 := []byte{
		0x01, 0x00, 0x02, 0x03, 0x22, 0x29, 0x0B, 0x10,
		0x06, 0x15, 0x10, 0x46, 0x94, 0x50, 0x61, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
		0x02, 0x09, 0x01, 0x00, 0x00, 0x33, 0x33, 0x05,
		0x0F, 0xB8, 0xD0, 0xD1, 0xCC, 0xCC, 0xBD, 0xB2,
		0xE2, 0xC6, 0xF7, 0x30, 0x30, 0x30, 0x30, 0x31,
		0x0D, 0x39, 0x30, 0x30, 0xC2, 0xA5, 0x30, 0xB2,
		0xE3, 0x30, 0xB7, 0xBF, 0xBC, 0xE4, 0x04, 0xB9,
		0xCA, 0xD5, 0xCF, 0x00, 0x11, 0x0E, 0x11, 0x09,
		0x12,
	}
	crc := 0xCE
	crc2 := 0x55
	//assert.Equal(t, GetLowCRC8(data), crc)
	//assert.Equal(t, GetCrc8ByTable(data), crc)
	//assert.Equal(t, GetHighCRC8(data), crc)
	//assert.Equal(t, GetCRC8HighByTable(data), crc)
	assert.Equal(t, CRC(data), uint8(crc))
	assert.Equal(t, CRC(data2), uint8(crc2))

}

//func TestParseDataBit(t *testing.T) {
//	var a byte
//	a = 0xce
//	fmt.Printf("10:%d\n",a)
//	fmt.Printf("bit0:%X\n", GetBit(a,GoodRun_SYS))
//	fmt.Printf("bit1:%X\n", GetBit(a,FireAlarm_SYS))
//	fmt.Printf("bit2:%X\n", GetBit(a,Screen_SYS))
//	fmt.Printf("bit4:%X\n", GetBit(a,Regulatory_SYS))
//	fmt.Printf("bit5:%X\n", GetBit(a,Start_SYS))
//	fmt.Printf("bit6:%X\n", GetBit(a,Feedback_SYS))
//	fmt.Printf("bit7:%X\n", GetBit(a,RockState_SYS))
//	fmt.Printf("bit8:%X\n", GetBit(a,MainPowerFail_SYS))
//}
